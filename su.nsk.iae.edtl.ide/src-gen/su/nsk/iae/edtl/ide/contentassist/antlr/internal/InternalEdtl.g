/*
 * generated by Xtext 2.25.0
 */
grammar InternalEdtl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package su.nsk.iae.edtl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package su.nsk.iae.edtl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import su.nsk.iae.edtl.services.EdtlGrammarAccess;

}
@parser::members {
	private EdtlGrammarAccess grammarAccess;

	public void setGrammarAccess(EdtlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableTypeName
entryRuleVariableTypeName
:
{ before(grammarAccess.getVariableTypeNameRule()); }
	 ruleVariableTypeName
{ after(grammarAccess.getVariableTypeNameRule()); } 
	 EOF 
;

// Rule VariableTypeName
ruleVariableTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableTypeNameAccess().getAlternatives()); }
		(rule__VariableTypeName__Alternatives)
		{ after(grammarAccess.getVariableTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclVarInput
entryRuleDeclVarInput
:
{ before(grammarAccess.getDeclVarInputRule()); }
	 ruleDeclVarInput
{ after(grammarAccess.getDeclVarInputRule()); } 
	 EOF 
;

// Rule DeclVarInput
ruleDeclVarInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclVarInputAccess().getGroup()); }
		(rule__DeclVarInput__Group__0)
		{ after(grammarAccess.getDeclVarInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclVarOutput
entryRuleDeclVarOutput
:
{ before(grammarAccess.getDeclVarOutputRule()); }
	 ruleDeclVarOutput
{ after(grammarAccess.getDeclVarOutputRule()); } 
	 EOF 
;

// Rule DeclVarOutput
ruleDeclVarOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclVarOutputAccess().getGroup()); }
		(rule__DeclVarOutput__Group__0)
		{ after(grammarAccess.getDeclVarOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbbr
entryRuleAbbr
:
{ before(grammarAccess.getAbbrRule()); }
	 ruleAbbr
{ after(grammarAccess.getAbbrRule()); } 
	 EOF 
;

// Rule Abbr
ruleAbbr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbbrAccess().getGroup()); }
		(rule__Abbr__Group__0)
		{ after(grammarAccess.getAbbrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMacros
entryRuleMacros
:
{ before(grammarAccess.getMacrosRule()); }
	 ruleMacros
{ after(grammarAccess.getMacrosRule()); } 
	 EOF 
;

// Rule Macros
ruleMacros 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMacrosAccess().getGroup()); }
		(rule__Macros__Group__0)
		{ after(grammarAccess.getMacrosAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarList
entryRuleVarList
:
{ before(grammarAccess.getVarListRule()); }
	 ruleVarList
{ after(grammarAccess.getVarListRule()); } 
	 EOF 
;

// Rule VarList
ruleVarList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarListAccess().getGroup()); }
		(rule__VarList__Group__0)
		{ after(grammarAccess.getVarListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRequirement
entryRuleRequirement
:
{ before(grammarAccess.getRequirementRule()); }
	 ruleRequirement
{ after(grammarAccess.getRequirementRule()); } 
	 EOF 
;

// Rule Requirement
ruleRequirement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRequirementAccess().getGroup()); }
		(rule__Requirement__Group__0)
		{ after(grammarAccess.getRequirementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getAlternatives()); }
		(rule__Attribute__Alternatives)
		{ after(grammarAccess.getAttributeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXOR_OPERATOR
entryRuleXOR_OPERATOR
:
{ before(grammarAccess.getXOR_OPERATORRule()); }
	 ruleXOR_OPERATOR
{ after(grammarAccess.getXOR_OPERATORRule()); } 
	 EOF 
;

// Rule XOR_OPERATOR
ruleXOR_OPERATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXOR_OPERATORAccess().getXORKeyword()); }
		'XOR'
		{ after(grammarAccess.getXOR_OPERATORAccess().getXORKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAND_OPERATOR
entryRuleAND_OPERATOR
:
{ before(grammarAccess.getAND_OPERATORRule()); }
	 ruleAND_OPERATOR
{ after(grammarAccess.getAND_OPERATORRule()); } 
	 EOF 
;

// Rule AND_OPERATOR
ruleAND_OPERATOR 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getAlternatives()); }
		(rule__AND_OPERATOR__Alternatives)
		{ after(grammarAccess.getAND_OPERATORAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompExpression
entryRuleCompExpression
:
{ before(grammarAccess.getCompExpressionRule()); }
	 ruleCompExpression
{ after(grammarAccess.getCompExpressionRule()); } 
	 EOF 
;

// Rule CompExpression
ruleCompExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompExpressionAccess().getGroup()); }
		(rule__CompExpression__Group__0)
		{ after(grammarAccess.getCompExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquExpression
entryRuleEquExpression
:
{ before(grammarAccess.getEquExpressionRule()); }
	 ruleEquExpression
{ after(grammarAccess.getEquExpressionRule()); } 
	 EOF 
;

// Rule EquExpression
ruleEquExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquExpressionAccess().getGroup()); }
		(rule__EquExpression__Group__0)
		{ after(grammarAccess.getEquExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnOperator
entryRuleUnOperator
:
{ before(grammarAccess.getUnOperatorRule()); }
	 ruleUnOperator
{ after(grammarAccess.getUnOperatorRule()); } 
	 EOF 
;

// Rule UnOperator
ruleUnOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnOperatorAccess().getAlternatives()); }
		(rule__UnOperator__Alternatives)
		{ after(grammarAccess.getUnOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNotOperator
entryRuleNotOperator
:
{ before(grammarAccess.getNotOperatorRule()); }
	 ruleNotOperator
{ after(grammarAccess.getNotOperatorRule()); } 
	 EOF 
;

// Rule NotOperator
ruleNotOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNotOperatorAccess().getAlternatives()); }
		(rule__NotOperator__Alternatives)
		{ after(grammarAccess.getNotOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnExpression
entryRuleUnExpression
:
{ before(grammarAccess.getUnExpressionRule()); }
	 ruleUnExpression
{ after(grammarAccess.getUnExpressionRule()); } 
	 EOF 
;

// Rule UnExpression
ruleUnExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnExpressionAccess().getAlternatives()); }
		(rule__UnExpression__Alternatives)
		{ after(grammarAccess.getUnExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTauExpression
entryRuleTauExpression
:
{ before(grammarAccess.getTauExpressionRule()); }
	 ruleTauExpression
{ after(grammarAccess.getTauExpressionRule()); } 
	 EOF 
;

// Rule TauExpression
ruleTauExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTauExpressionAccess().getGroup()); }
		(rule__TauExpression__Group__0)
		{ after(grammarAccess.getTauExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral
:
{ before(grammarAccess.getTimeLiteralRule()); }
	 ruleTimeLiteral
{ after(grammarAccess.getTimeLiteralRule()); } 
	 EOF 
;

// Rule TimeLiteral
ruleTimeLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeLiteralAccess().getGroup()); }
		(rule__TimeLiteral__Group__0)
		{ after(grammarAccess.getTimeLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTIME_PREF_LITERAL
entryRuleTIME_PREF_LITERAL
:
{ before(grammarAccess.getTIME_PREF_LITERALRule()); }
	 ruleTIME_PREF_LITERAL
{ after(grammarAccess.getTIME_PREF_LITERALRule()); } 
	 EOF 
;

// Rule TIME_PREF_LITERAL
ruleTIME_PREF_LITERAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTIME_PREF_LITERALAccess().getTKeyword()); }
		'#T'
		{ after(grammarAccess.getTIME_PREF_LITERALAccess().getTKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamAssignmentElements
entryRuleParamAssignmentElements
:
{ before(grammarAccess.getParamAssignmentElementsRule()); }
	 ruleParamAssignmentElements
{ after(grammarAccess.getParamAssignmentElementsRule()); } 
	 EOF 
;

// Rule ParamAssignmentElements
ruleParamAssignmentElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamAssignmentElementsAccess().getGroup()); }
		(rule__ParamAssignmentElements__Group__0)
		{ after(grammarAccess.getParamAssignmentElementsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EquOperator
ruleEquOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquOperatorAccess().getAlternatives()); }
		(rule__EquOperator__Alternatives)
		{ after(grammarAccess.getEquOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CompOperator
ruleCompOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompOperatorAccess().getAlternatives()); }
		(rule__CompOperator__Alternatives)
		{ after(grammarAccess.getCompOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getDeclVarInputParserRuleCall_0()); }
		ruleDeclVarInput
		{ after(grammarAccess.getStatementAccess().getDeclVarInputParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDeclVarOutputParserRuleCall_1()); }
		ruleDeclVarOutput
		{ after(grammarAccess.getStatementAccess().getDeclVarOutputParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getAbbrParserRuleCall_2()); }
		ruleAbbr
		{ after(grammarAccess.getStatementAccess().getAbbrParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getMacrosParserRuleCall_3()); }
		ruleMacros
		{ after(grammarAccess.getStatementAccess().getMacrosParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRequirementParserRuleCall_4()); }
		ruleRequirement
		{ after(grammarAccess.getStatementAccess().getRequirementParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableTypeNameAccess().getBOOLKeyword_0()); }
		'BOOL'
		{ after(grammarAccess.getVariableTypeNameAccess().getBOOLKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableTypeNameAccess().getINTKeyword_1()); }
		'INT'
		{ after(grammarAccess.getVariableTypeNameAccess().getINTKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTRIGGERKeyword_0()); }
		'TRIGGER'
		{ after(grammarAccess.getAttributeAccess().getTRIGGERKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getINVKeyword_1()); }
		'INV'
		{ after(grammarAccess.getAttributeAccess().getINVKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getFINALKeyword_2()); }
		'FINAL'
		{ after(grammarAccess.getAttributeAccess().getFINALKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getDELAYKeyword_3()); }
		'DELAY'
		{ after(grammarAccess.getAttributeAccess().getDELAYKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getREACTIONKeyword_4()); }
		'REACTION'
		{ after(grammarAccess.getAttributeAccess().getREACTIONKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getRELEASEKeyword_5()); }
		'RELEASE'
		{ after(grammarAccess.getAttributeAccess().getRELEASEKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AND_OPERATOR__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_0()); }
		'&&'
		{ after(grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAND_OPERATORAccess().getANDKeyword_1()); }
		'AND'
		{ after(grammarAccess.getAND_OPERATORAccess().getANDKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnOperatorAccess().getNotOperatorParserRuleCall_0()); }
		ruleNotOperator
		{ after(grammarAccess.getUnOperatorAccess().getNotOperatorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnOperatorAccess().getFEKeyword_1()); }
		'FE'
		{ after(grammarAccess.getUnOperatorAccess().getFEKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnOperatorAccess().getREKeyword_2()); }
		'RE'
		{ after(grammarAccess.getUnOperatorAccess().getREKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnOperatorAccess().getHIGHKeyword_3()); }
		'HIGH'
		{ after(grammarAccess.getUnOperatorAccess().getHIGHKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnOperatorAccess().getLOWKeyword_4()); }
		'LOW'
		{ after(grammarAccess.getUnOperatorAccess().getLOWKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NotOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNotOperatorAccess().getNOTKeyword_0()); }
		'NOT'
		{ after(grammarAccess.getNotOperatorAccess().getNOTKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1()); }
		'!'
		{ after(grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnExpressionAccess().getGroup_1()); }
		(rule__UnExpression__Group_1__0)
		{ after(grammarAccess.getUnExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_0()); }
		(rule__PrimaryExpression__ConstAssignment_0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getConstAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVarAssignment_1()); }
		(rule__PrimaryExpression__VarAssignment_1)
		{ after(grammarAccess.getPrimaryExpressionAccess().getVarAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
		(rule__PrimaryExpression__Group_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getTauAssignment_3()); }
		(rule__PrimaryExpression__TauAssignment_3)
		{ after(grammarAccess.getPrimaryExpressionAccess().getTauAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
		(rule__PrimaryExpression__Group_4__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
		('==')
		{ after(grammarAccess.getEquOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEquOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1()); }
		('<>')
		{ after(grammarAccess.getEquOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2()); }
		('<=')
		{ after(grammarAccess.getCompOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3()); }
		('>=')
		{ after(grammarAccess.getCompOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getWAction_0()); }
	()
	{ after(grammarAccess.getModelAccess().getWAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getElementsAssignment_1()); }
	(rule__Model__ElementsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclVarInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarInput__Group__0__Impl
	rule__DeclVarInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarInputAccess().getDeclVarInputAction_0()); }
	()
	{ after(grammarAccess.getDeclVarInputAccess().getDeclVarInputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarInput__Group__1__Impl
	rule__DeclVarInput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarInputAccess().getVAR_INPUTKeyword_1()); }
	'VAR_INPUT'
	{ after(grammarAccess.getDeclVarInputAccess().getVAR_INPUTKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarInput__Group__2__Impl
	rule__DeclVarInput__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarInputAccess().getGroup_2()); }
	(rule__DeclVarInput__Group_2__0)*
	{ after(grammarAccess.getDeclVarInputAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarInput__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarInputAccess().getEND_VARKeyword_3()); }
	'END_VAR'
	{ after(grammarAccess.getDeclVarInputAccess().getEND_VARKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclVarInput__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarInput__Group_2__0__Impl
	rule__DeclVarInput__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarInputAccess().getValueAssignment_2_0()); }
	(rule__DeclVarInput__ValueAssignment_2_0)
	{ after(grammarAccess.getDeclVarInputAccess().getValueAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarInput__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarInputAccess().getSemicolonKeyword_2_1()); }
	';'
	{ after(grammarAccess.getDeclVarInputAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclVarOutput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarOutput__Group__0__Impl
	rule__DeclVarOutput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarOutputAccess().getDeclVarOutputAction_0()); }
	()
	{ after(grammarAccess.getDeclVarOutputAccess().getDeclVarOutputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarOutput__Group__1__Impl
	rule__DeclVarOutput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarOutputAccess().getVAR_OUTPUTKeyword_1()); }
	'VAR_OUTPUT'
	{ after(grammarAccess.getDeclVarOutputAccess().getVAR_OUTPUTKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarOutput__Group__2__Impl
	rule__DeclVarOutput__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarOutputAccess().getGroup_2()); }
	(rule__DeclVarOutput__Group_2__0)*
	{ after(grammarAccess.getDeclVarOutputAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarOutput__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarOutputAccess().getEND_VARKeyword_3()); }
	'END_VAR'
	{ after(grammarAccess.getDeclVarOutputAccess().getEND_VARKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclVarOutput__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarOutput__Group_2__0__Impl
	rule__DeclVarOutput__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarOutputAccess().getValueAssignment_2_0()); }
	(rule__DeclVarOutput__ValueAssignment_2_0)
	{ after(grammarAccess.getDeclVarOutputAccess().getValueAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclVarOutput__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclVarOutputAccess().getSemicolonKeyword_2_1()); }
	';'
	{ after(grammarAccess.getDeclVarOutputAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarAssignment_0()); }
	(rule__VarDeclaration__VarAssignment_0)
	{ after(grammarAccess.getVarDeclarationAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
	rule__VarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getVarDeclarationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_2()); }
	(rule__VarDeclaration__TypeAssignment_2)
	{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Abbr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abbr__Group__0__Impl
	rule__Abbr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbbrAccess().getABBRKeyword_0()); }
	'ABBR'
	{ after(grammarAccess.getAbbrAccess().getABBRKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abbr__Group__1__Impl
	rule__Abbr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbbrAccess().getNameAssignment_1()); }
	(rule__Abbr__NameAssignment_1)
	{ after(grammarAccess.getAbbrAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abbr__Group__2__Impl
	rule__Abbr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbbrAccess().getValueAssignment_2()); }
	(rule__Abbr__ValueAssignment_2)*
	{ after(grammarAccess.getAbbrAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Abbr__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbbrAccess().getEND_ABBRKeyword_3()); }
	'END_ABBR'
	{ after(grammarAccess.getAbbrAccess().getEND_ABBRKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Macros__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__0__Impl
	rule__Macros__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getMACROSKeyword_0()); }
	'MACROS'
	{ after(grammarAccess.getMacrosAccess().getMACROSKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__1__Impl
	rule__Macros__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getNameAssignment_1()); }
	(rule__Macros__NameAssignment_1)
	{ after(grammarAccess.getMacrosAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__2__Impl
	rule__Macros__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getMacrosAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__3__Impl
	rule__Macros__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getArgsAssignment_3()); }
	(rule__Macros__ArgsAssignment_3)?
	{ after(grammarAccess.getMacrosAccess().getArgsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__4__Impl
	rule__Macros__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMacrosAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__5__Impl
	rule__Macros__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getValueAssignment_5()); }
	(rule__Macros__ValueAssignment_5)*
	{ after(grammarAccess.getMacrosAccess().getValueAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Macros__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMacrosAccess().getEND_MACROSKeyword_6()); }
	'END_MACROS'
	{ after(grammarAccess.getMacrosAccess().getEND_MACROSKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group__0__Impl
	rule__VarList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getVarsAssignment_0()); }
	(rule__VarList__VarsAssignment_0)
	{ after(grammarAccess.getVarListAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getGroup_1()); }
	(rule__VarList__Group_1__0)*
	{ after(grammarAccess.getVarListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group_1__0__Impl
	rule__VarList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVarListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarListAccess().getVarsAssignment_1_1()); }
	(rule__VarList__VarsAssignment_1_1)
	{ after(grammarAccess.getVarListAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Requirement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__0__Impl
	rule__Requirement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getREQKeyword_0()); }
	'REQ'
	{ after(grammarAccess.getRequirementAccess().getREQKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__1__Impl
	rule__Requirement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getNameAssignment_1()); }
	(rule__Requirement__NameAssignment_1)
	{ after(grammarAccess.getRequirementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__2__Impl
	rule__Requirement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getGroup_2()); }
	(rule__Requirement__Group_2__0)*
	{ after(grammarAccess.getRequirementAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getEND_REQKeyword_3()); }
	'END_REQ'
	{ after(grammarAccess.getRequirementAccess().getEND_REQKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Requirement__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group_2__0__Impl
	rule__Requirement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getAttributeAssignment_2_0()); }
	(rule__Requirement__AttributeAssignment_2_0)
	{ after(grammarAccess.getRequirementAccess().getAttributeAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group_2__1__Impl
	rule__Requirement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getDECL_SYMBTerminalRuleCall_2_1()); }
	RULE_DECL_SYMB
	{ after(grammarAccess.getRequirementAccess().getDECL_SYMBTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group_2__2__Impl
	rule__Requirement__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getValueAssignment_2_2()); }
	(rule__Requirement__ValueAssignment_2_2)
	{ after(grammarAccess.getRequirementAccess().getValueAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Requirement__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRequirementAccess().getSemicolonKeyword_2_3()); }
	';'
	{ after(grammarAccess.getRequirementAccess().getSemicolonKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOrOpAssignment_1_1()); }
	(rule__Expression__OrOpAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getOrOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
	(rule__Expression__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
	rule__XorExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getXOR_OPERATORParserRuleCall_1_1()); }
	ruleXOR_OPERATOR
	{ after(grammarAccess.getXorExpressionAccess().getXOR_OPERATORParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
	(rule__XorExpression__RightAssignment_1_2)
	{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0()); }
	ruleCompExpression
	{ after(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndOpAssignment_1_1()); }
	(rule__AndExpression__AndOpAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getAndOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__0__Impl
	rule__CompExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0()); }
	ruleEquExpression
	{ after(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getGroup_1()); }
	(rule__CompExpression__Group_1__0)*
	{ after(grammarAccess.getCompExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__0__Impl
	rule__CompExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__1__Impl
	rule__CompExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getCompOpAssignment_1_1()); }
	(rule__CompExpression__CompOpAssignment_1_1)
	{ after(grammarAccess.getCompExpressionAccess().getCompOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompExpressionAccess().getRightAssignment_1_2()); }
	(rule__CompExpression__RightAssignment_1_2)
	{ after(grammarAccess.getCompExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__0__Impl
	rule__EquExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getUnExpressionParserRuleCall_0()); }
	ruleUnExpression
	{ after(grammarAccess.getEquExpressionAccess().getUnExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1()); }
	(rule__EquExpression__Group_1__0)*
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__0__Impl
	rule__EquExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__1__Impl
	rule__EquExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getEquOpAssignment_1_1()); }
	(rule__EquExpression__EquOpAssignment_1_1)
	{ after(grammarAccess.getEquExpressionAccess().getEquOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getRightAssignment_1_2()); }
	(rule__EquExpression__RightAssignment_1_2)
	{ after(grammarAccess.getEquExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnExpression__Group_1__0__Impl
	rule__UnExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnExpressionAccess().getUnOpAssignment_1_0()); }
	(rule__UnExpression__UnOpAssignment_1_0)
	{ after(grammarAccess.getUnExpressionAccess().getUnOpAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnExpressionAccess().getRightAssignment_1_1()); }
	(rule__UnExpression__RightAssignment_1_1)
	{ after(grammarAccess.getUnExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TauExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TauExpression__Group__0__Impl
	rule__TauExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTauExpressionAccess().getTAUKeyword_0()); }
	'TAU'
	{ after(grammarAccess.getTauExpressionAccess().getTAUKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TauExpression__Group__1__Impl
	rule__TauExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTauExpressionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTauExpressionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TauExpression__Group__2__Impl
	rule__TauExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTauExpressionAccess().getTimeAssignment_2()); }
	(rule__TauExpression__TimeAssignment_2)
	{ after(grammarAccess.getTauExpressionAccess().getTimeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TauExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTauExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTauExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TimeLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeLiteral__Group__0__Impl
	rule__TimeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALParserRuleCall_0()); }
	ruleTIME_PREF_LITERAL
	{ after(grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TimeLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeLiteralAccess().getIntervalAssignment_1()); }
	(rule__TimeLiteral__IntervalAssignment_1)
	{ after(grammarAccess.getTimeLiteralAccess().getIntervalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getMacrosAssignment_2_0()); }
	(rule__PrimaryExpression__MacrosAssignment_2_0)
	{ after(grammarAccess.getPrimaryExpressionAccess().getMacrosAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_1()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__2__Impl
	rule__PrimaryExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2()); }
	(rule__PrimaryExpression__ArgsAssignment_2_2)?
	{ after(grammarAccess.getPrimaryExpressionAccess().getArgsAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_4__0__Impl
	rule__PrimaryExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_4__1__Impl
	rule__PrimaryExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getNestExprAssignment_4_1()); }
	(rule__PrimaryExpression__NestExprAssignment_4_1)
	{ after(grammarAccess.getPrimaryExpressionAccess().getNestExprAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignmentElements__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignmentElements__Group__0__Impl
	rule__ParamAssignmentElements__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentElementsAccess().getElementsAssignment_0()); }
	(rule__ParamAssignmentElements__ElementsAssignment_0)
	{ after(grammarAccess.getParamAssignmentElementsAccess().getElementsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignmentElements__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentElementsAccess().getGroup_1()); }
	(rule__ParamAssignmentElements__Group_1__0)*
	{ after(grammarAccess.getParamAssignmentElementsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamAssignmentElements__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignmentElements__Group_1__0__Impl
	rule__ParamAssignmentElements__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentElementsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getParamAssignmentElementsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamAssignmentElements__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamAssignmentElementsAccess().getElementsAssignment_1_1()); }
	(rule__ParamAssignmentElements__ElementsAssignment_1_1)
	{ after(grammarAccess.getParamAssignmentElementsAccess().getElementsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getElementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getModelAccess().getElementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarInput__ValueAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclVarInputAccess().getValueVarDeclarationParserRuleCall_2_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getDeclVarInputAccess().getValueVarDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclVarOutput__ValueAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclVarOutputAccess().getValueVarDeclarationParserRuleCall_2_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getDeclVarOutputAccess().getValueVarDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getVarVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getVarDeclarationAccess().getVarVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getTypeVariableTypeNameParserRuleCall_2_0()); }
		ruleVariableTypeName
		{ after(grammarAccess.getVarDeclarationAccess().getTypeVariableTypeNameParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbbrAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAbbrAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Abbr__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbbrAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAbbrAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMacrosAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMacrosAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__ArgsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMacrosAccess().getArgsVarListParserRuleCall_3_0()); }
		ruleVarList
		{ after(grammarAccess.getMacrosAccess().getArgsVarListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Macros__ValueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMacrosAccess().getValueExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getMacrosAccess().getValueExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarListAccess().getVarsVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getVarListAccess().getVarsVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarList__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarListAccess().getVarsVariableParserRuleCall_1_1_0()); }
		ruleVariable
		{ after(grammarAccess.getVarListAccess().getVarsVariableParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__AttributeAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getAttributeAttributeParserRuleCall_2_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getRequirementAccess().getAttributeAttributeParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Requirement__ValueAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRequirementAccess().getValueExpressionParserRuleCall_2_2_0()); }
		ruleExpression
		{ after(grammarAccess.getRequirementAccess().getValueExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OrOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOrOpOR_OPERATORTerminalRuleCall_1_1_0()); }
		RULE_OR_OPERATOR
		{ after(grammarAccess.getExpressionAccess().getOrOpOR_OPERATORTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
		ruleXorExpression
		{ after(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__AndOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getAndOpAND_OPERATORParserRuleCall_1_1_0()); }
		ruleAND_OPERATOR
		{ after(grammarAccess.getAndExpressionAccess().getAndOpAND_OPERATORParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0()); }
		ruleCompExpression
		{ after(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__CompOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0()); }
		ruleCompOperator
		{ after(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getCompExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__EquOpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0()); }
		ruleEquOperator
		{ after(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getRightUnExpressionParserRuleCall_1_2_0()); }
		ruleUnExpression
		{ after(grammarAccess.getEquExpressionAccess().getRightUnExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpression__UnOpAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnExpressionAccess().getUnOpUnOperatorParserRuleCall_1_0_0()); }
		ruleUnOperator
		{ after(grammarAccess.getUnExpressionAccess().getUnOpUnOperatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TauExpression__TimeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTauExpressionAccess().getTimeTimeLiteralParserRuleCall_2_0()); }
		ruleTimeLiteral
		{ after(grammarAccess.getTauExpressionAccess().getTimeTimeLiteralParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeLiteral__IntervalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_1_0()); }
		RULE_INTERVAL
		{ after(grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ConstAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getConstINTEGERTerminalRuleCall_0_0()); }
		RULE_INTEGER
		{ after(grammarAccess.getPrimaryExpressionAccess().getConstINTEGERTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVarCrossVarAbbrCrossReference_1_0()); }
		(
			{ before(grammarAccess.getPrimaryExpressionAccess().getVarCrossVarAbbrIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryExpressionAccess().getVarCrossVarAbbrIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryExpressionAccess().getVarCrossVarAbbrCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__MacrosAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getMacrosMacrosCrossReference_2_0_0()); }
		(
			{ before(grammarAccess.getPrimaryExpressionAccess().getMacrosMacrosIDTerminalRuleCall_2_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryExpressionAccess().getMacrosMacrosIDTerminalRuleCall_2_0_0_1()); }
		)
		{ after(grammarAccess.getPrimaryExpressionAccess().getMacrosMacrosCrossReference_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ArgsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getArgsParamAssignmentElementsParserRuleCall_2_2_0()); }
		ruleParamAssignmentElements
		{ after(grammarAccess.getPrimaryExpressionAccess().getArgsParamAssignmentElementsParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__TauAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getTauTauExpressionParserRuleCall_3_0()); }
		ruleTauExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getTauTauExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NestExprAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_4_1_0()); }
		ruleExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__ElementsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableCrossReference_0_0()); }
		(
			{ before(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamAssignmentElements__ElementsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getParamAssignmentElementsAccess().getElementsVariableCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DECL_SYMB : ':=';

RULE_OR_OPERATOR : ('||'|'OR');

RULE_INTERVAL : (RULE_INTEGER 'd')? (RULE_INTEGER 'h')? (RULE_INTEGER 'm')? (RULE_INTEGER 's')? (RULE_INTEGER 'ms')?;

RULE_INTEGER : RULE_DIGIT+;

fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_BIT : ('0'|'1');

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : (RULE_DIGIT|'A'..'F');

RULE_ID : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_ML_COMMENT : ('/*' ( options {greedy=false;} : . )*'*/'|'(*' ( options {greedy=false;} : . )*'*)');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
