/*
 * generated by Xtext 2.25.0
 */
package su.nsk.iae.edtl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import su.nsk.iae.edtl.edtl.Requirement
import su.nsk.iae.edtl.helpers.ExpressionGenerationHelper

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EdtlGenerator extends AbstractGenerator {
	ExpressionGenerationHelper translater
	
	/*override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('reqs.txt', 'Reqs: ' + 
			resource.allContents
				.filter(Requirement)
				.map[reqName]
				.join(', '))
	}*/
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context){
		translater = new ExpressionGenerationHelper()
		val reqNames = newArrayList()
		val requirements = newArrayList()
		resource.allContents.filter(Requirement).map[name].forEach [v | reqNames.add(v)]
		resource.allContents.filter(Requirement).forEach [v | requirements.add(v)]
		
		val fileContent = '''
		#include "../headers/EdtlFunctions.h"
		
		EdtlFunctions::EdtlFunctions(/* args */)
		{}
		
		EdtlFunctions::~EdtlFunctions()
		{}
		
		void EdtlFunctions::calculate(VerificationFSM *fsm, std::map <std::string, PortVariable*> *v, requirementId id) {
			EdtlAttributes edtlAttributes;
			
			switch (id) { 
				«FOR requirement: requirements»
				case «requirement.name» : {
					edtlAttributes.trigger = «translater.translateExpr(requirement.value.get(0))»;
					edtlAttributes.invariant = «translater.translateExpr(requirement.value.get(1))»;
					edtlAttributes.final = «translater.translateExpr(requirement.value.get(2))»;
					edtlAttributes.delay = «translater.translateExpr(requirement.value.get(3))»; 
					edtlAttributes.reaction = «translater.translateExpr(requirement.value.get(4))»;
					edtlAttributes.release = «translater.translateExpr(requirement.value.get(5))»;
					break;
				}
				«ENDFOR»
				default: {
					break;
				}
			}
			fsm->set(edtlAttributes);
		};
		'''

		fsa.generateFile('''EdtlFunctions.cpp''', fileContent)
	}
}
