/**
 * generated by Xtext 2.25.0
 */
package su.nsk.iae.edtl.validation;

import com.google.common.base.Objects;
import org.eclipse.xtext.validation.Check;
import su.nsk.iae.edtl.edtl.AndExpression;
import su.nsk.iae.edtl.edtl.EdtlPackage;
import su.nsk.iae.edtl.edtl.Expression;
import su.nsk.iae.edtl.edtl.UnExpression;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class EdtlValidator extends AbstractEdtlValidator {
  private final EdtlPackage ePackage = EdtlPackage.eINSTANCE;
  
  @Check
  public void checkAndOperatorStyle(final AndExpression e) {
    String _andOp = e.getAndOp();
    boolean _equals = Objects.equal(_andOp, "&&");
    if (_equals) {
      this.warning("please, write AND instead of &&", this.ePackage.getExpression_OrOp());
    }
  }
  
  @Check
  public void checkOrOperatorStyle(final Expression e) {
    String _orOp = e.getOrOp();
    boolean _equals = Objects.equal(_orOp, "||");
    if (_equals) {
      this.warning("please, write OR instead of ||", this.ePackage.getExpression_OrOp());
    }
  }
  
  @Check
  public void checkNotOperatorStyle(final UnExpression e) {
    String _unOp = e.getUnOp();
    boolean _equals = Objects.equal(_unOp, "!");
    if (_equals) {
      this.warning("please, write NOT instead of !", this.ePackage.getExpression_OrOp());
    }
  }
}
