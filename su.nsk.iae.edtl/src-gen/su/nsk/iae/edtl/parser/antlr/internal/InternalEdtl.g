/*
 * generated by Xtext 2.25.0
 */
grammar InternalEdtl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package su.nsk.iae.edtl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package su.nsk.iae.edtl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import su.nsk.iae.edtl.services.EdtlGrammarAccess;

}

@parser::members {

 	private EdtlGrammarAccess grammarAccess;

    public InternalEdtlParser(TokenStream input, EdtlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EdtlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getWAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getElementsStatementParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"su.nsk.iae.edtl.Edtl.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeclVarInputParserRuleCall_0());
		}
		this_DeclVarInput_0=ruleDeclVarInput
		{
			$current = $this_DeclVarInput_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDeclVarOutputParserRuleCall_1());
		}
		this_DeclVarOutput_1=ruleDeclVarOutput
		{
			$current = $this_DeclVarOutput_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAbbrParserRuleCall_2());
		}
		this_Abbr_2=ruleAbbr
		{
			$current = $this_Abbr_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getMacrosParserRuleCall_3());
		}
		this_Macros_3=ruleMacros
		{
			$current = $this_Macros_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRequirementParserRuleCall_4());
		}
		this_Requirement_4=ruleRequirement
		{
			$current = $this_Requirement_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableTypeName
entryRuleVariableTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableTypeNameRule()); }
	iv_ruleVariableTypeName=ruleVariableTypeName
	{ $current=$iv_ruleVariableTypeName.current.getText(); }
	EOF;

// Rule VariableTypeName
ruleVariableTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='BOOL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeNameAccess().getBOOLKeyword_0());
		}
		    |
		kw='INT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeNameAccess().getINTKeyword_1());
		}
	)
;

// Entry rule entryRuleDeclVarInput
entryRuleDeclVarInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclVarInputRule()); }
	iv_ruleDeclVarInput=ruleDeclVarInput
	{ $current=$iv_ruleDeclVarInput.current; }
	EOF;

// Rule DeclVarInput
ruleDeclVarInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclVarInputAccess().getDeclVarInputAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_INPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclVarInputAccess().getVAR_INPUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclVarInputAccess().getValueVarDeclarationParserRuleCall_2_0_0());
					}
					lv_value_2_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclVarInputRule());
						}
						add(
							$current,
							"value",
							lv_value_2_0,
							"su.nsk.iae.edtl.Edtl.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getDeclVarInputAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeclVarInputAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleDeclVarOutput
entryRuleDeclVarOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclVarOutputRule()); }
	iv_ruleDeclVarOutput=ruleDeclVarOutput
	{ $current=$iv_ruleDeclVarOutput.current; }
	EOF;

// Rule DeclVarOutput
ruleDeclVarOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDeclVarOutputAccess().getDeclVarOutputAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_OUTPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getDeclVarOutputAccess().getVAR_OUTPUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclVarOutputAccess().getValueVarDeclarationParserRuleCall_2_0_0());
					}
					lv_value_2_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclVarOutputRule());
						}
						add(
							$current,
							"value",
							lv_value_2_0,
							"su.nsk.iae.edtl.Edtl.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getDeclVarOutputAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getDeclVarOutputAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarVariableParserRuleCall_0_0());
				}
				lv_var_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"var",
						lv_var_0_0,
						"su.nsk.iae.edtl.Edtl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeVariableTypeNameParserRuleCall_2_0());
				}
				lv_type_2_0=ruleVariableTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"su.nsk.iae.edtl.Edtl.VariableTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAbbr
entryRuleAbbr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbbrRule()); }
	iv_ruleAbbr=ruleAbbr
	{ $current=$iv_ruleAbbr.current; }
	EOF;

// Rule Abbr
ruleAbbr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ABBR'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbbrAccess().getABBRKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAbbrAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAbbrRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.edtl.Edtl.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAbbrAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbbrRule());
					}
					add(
						$current,
						"value",
						lv_value_2_0,
						"su.nsk.iae.edtl.Edtl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='END_ABBR'
		{
			newLeafNode(otherlv_3, grammarAccess.getAbbrAccess().getEND_ABBRKeyword_3());
		}
	)
;

// Entry rule entryRuleMacros
entryRuleMacros returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMacrosRule()); }
	iv_ruleMacros=ruleMacros
	{ $current=$iv_ruleMacros.current; }
	EOF;

// Rule Macros
ruleMacros returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MACROS'
		{
			newLeafNode(otherlv_0, grammarAccess.getMacrosAccess().getMACROSKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMacrosAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMacrosRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.edtl.Edtl.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getMacrosAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMacrosAccess().getArgsVarListParserRuleCall_3_0());
				}
				lv_args_3_0=ruleVarList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMacrosRule());
					}
					set(
						$current,
						"args",
						lv_args_3_0,
						"su.nsk.iae.edtl.Edtl.VarList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMacrosAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMacrosAccess().getValueExpressionParserRuleCall_5_0());
				}
				lv_value_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMacrosRule());
					}
					add(
						$current,
						"value",
						lv_value_5_0,
						"su.nsk.iae.edtl.Edtl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='END_MACROS'
		{
			newLeafNode(otherlv_6, grammarAccess.getMacrosAccess().getEND_MACROSKeyword_6());
		}
	)
;

// Entry rule entryRuleVarList
entryRuleVarList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarListRule()); }
	iv_ruleVarList=ruleVarList
	{ $current=$iv_ruleVarList.current; }
	EOF;

// Rule VarList
ruleVarList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarListAccess().getVarsVariableParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarListRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"su.nsk.iae.edtl.Edtl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVarListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarListAccess().getVarsVariableParserRuleCall_1_1_0());
					}
					lv_vars_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarListRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.edtl.Edtl.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='REQ'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequirementAccess().getREQKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRequirementAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRequirementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.edtl.Edtl.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementAccess().getAttributeAttributeParserRuleCall_2_0_0());
					}
					lv_attribute_2_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_2_0,
							"su.nsk.iae.edtl.Edtl.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_DECL_SYMB_3=RULE_DECL_SYMB
			{
				newLeafNode(this_DECL_SYMB_3, grammarAccess.getRequirementAccess().getDECL_SYMBTerminalRuleCall_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRequirementAccess().getValueExpressionParserRuleCall_2_2_0());
					}
					lv_value_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRequirementRule());
						}
						add(
							$current,
							"value",
							lv_value_4_0,
							"su.nsk.iae.edtl.Edtl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getRequirementAccess().getSemicolonKeyword_2_3());
			}
		)*
		otherlv_6='END_REQ'
		{
			newLeafNode(otherlv_6, grammarAccess.getRequirementAccess().getEND_REQKeyword_3());
		}
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current.getText(); }
	EOF;

// Rule Attribute
ruleAttribute returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='TRIGGER'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAttributeAccess().getTRIGGERKeyword_0());
		}
		    |
		kw='INV'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAttributeAccess().getINVKeyword_1());
		}
		    |
		kw='FINAL'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAttributeAccess().getFINALKeyword_2());
		}
		    |
		kw='DELAY'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAttributeAccess().getDELAYKeyword_3());
		}
		    |
		kw='REACTION'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAttributeAccess().getREACTIONKeyword_4());
		}
		    |
		kw='RELEASE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAttributeAccess().getRELEASEKeyword_5());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"su.nsk.iae.edtl.Edtl.ID");
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0());
		}
		this_XorExpression_0=ruleXorExpression
		{
			$current = $this_XorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_orOp_2_0=RULE_OR_OPERATOR
					{
						newLeafNode(lv_orOp_2_0, grammarAccess.getExpressionAccess().getOrOpOR_OPERATORTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"orOp",
							lv_orOp_2_0,
							"su.nsk.iae.edtl.Edtl.OR_OPERATOR");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.edtl.Edtl.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getXorExpressionAccess().getXOR_OPERATORParserRuleCall_1_1());
			}
			ruleXOR_OPERATOR
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.edtl.Edtl.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXOR_OPERATOR
entryRuleXOR_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getXOR_OPERATORRule()); }
	iv_ruleXOR_OPERATOR=ruleXOR_OPERATOR
	{ $current=$iv_ruleXOR_OPERATOR.current.getText(); }
	EOF;

// Rule XOR_OPERATOR
ruleXOR_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='XOR'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getXOR_OPERATORAccess().getXORKeyword());
	}
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0());
		}
		this_CompExpression_0=ruleCompExpression
		{
			$current = $this_CompExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getAndOpAND_OPERATORParserRuleCall_1_1_0());
					}
					lv_andOp_2_0=ruleAND_OPERATOR
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"andOp",
							lv_andOp_2_0,
							"su.nsk.iae.edtl.Edtl.AND_OPERATOR");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCompExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.edtl.Edtl.CompExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAND_OPERATOR
entryRuleAND_OPERATOR returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAND_OPERATORRule()); }
	iv_ruleAND_OPERATOR=ruleAND_OPERATOR
	{ $current=$iv_ruleAND_OPERATOR.current.getText(); }
	EOF;

// Rule AND_OPERATOR
ruleAND_OPERATOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getAmpersandAmpersandKeyword_0());
		}
		    |
		kw='AND'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAND_OPERATORAccess().getANDKeyword_1());
		}
	)
;

// Entry rule entryRuleCompExpression
entryRuleCompExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompExpressionRule()); }
	iv_ruleCompExpression=ruleCompExpression
	{ $current=$iv_ruleCompExpression.current; }
	EOF;

// Rule CompExpression
ruleCompExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0());
		}
		this_EquExpression_0=ruleEquExpression
		{
			$current = $this_EquExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0());
					}
					lv_compOp_2_0=ruleCompOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"compOp",
							lv_compOp_2_0,
							"su.nsk.iae.edtl.Edtl.CompOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.edtl.Edtl.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquExpression
entryRuleEquExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquExpressionRule()); }
	iv_ruleEquExpression=ruleEquExpression
	{ $current=$iv_ruleEquExpression.current; }
	EOF;

// Rule EquExpression
ruleEquExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquExpressionAccess().getUnExpressionParserRuleCall_0());
		}
		this_UnExpression_0=ruleUnExpression
		{
			$current = $this_UnExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0());
					}
					lv_equOp_2_0=ruleEquOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"equOp",
							lv_equOp_2_0,
							"su.nsk.iae.edtl.Edtl.EquOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getRightUnExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.edtl.Edtl.UnExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnOperator
entryRuleUnOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnOperatorRule()); }
	iv_ruleUnOperator=ruleUnOperator
	{ $current=$iv_ruleUnOperator.current.getText(); }
	EOF;

// Rule UnOperator
ruleUnOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnOperatorAccess().getNotOperatorParserRuleCall_0());
		}
		this_NotOperator_0=ruleNotOperator
		{
			$current.merge(this_NotOperator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		kw='FE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getFEKeyword_1());
		}
		    |
		kw='RE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getREKeyword_2());
		}
		    |
		kw='HIGH'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getHIGHKeyword_3());
		}
		    |
		kw='LOW'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnOperatorAccess().getLOWKeyword_4());
		}
	)
;

// Entry rule entryRuleNotOperator
entryRuleNotOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNotOperatorRule()); }
	iv_ruleNotOperator=ruleNotOperator
	{ $current=$iv_ruleNotOperator.current.getText(); }
	EOF;

// Rule NotOperator
ruleNotOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='NOT'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNotOperatorAccess().getNOTKeyword_0());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNotOperatorAccess().getExclamationMarkKeyword_1());
		}
	)
;

// Entry rule entryRuleUnExpression
entryRuleUnExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnExpressionRule()); }
	iv_ruleUnExpression=ruleUnExpression
	{ $current=$iv_ruleUnExpression.current; }
	EOF;

// Rule UnExpression
ruleUnExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnExpressionAccess().getUnOpUnOperatorParserRuleCall_1_0_0());
					}
					lv_unOp_1_0=ruleUnOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnExpressionRule());
						}
						set(
							$current,
							"unOp",
							lv_unOp_1_0,
							"su.nsk.iae.edtl.Edtl.UnOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"su.nsk.iae.edtl.Edtl.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTauExpression
entryRuleTauExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTauExpressionRule()); }
	iv_ruleTauExpression=ruleTauExpression
	{ $current=$iv_ruleTauExpression.current; }
	EOF;

// Rule TauExpression
ruleTauExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TAU'
		{
			newLeafNode(otherlv_0, grammarAccess.getTauExpressionAccess().getTAUKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTauExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTauExpressionAccess().getTimeTimeLiteralParserRuleCall_2_0());
				}
				lv_time_2_0=ruleTimeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTauExpressionRule());
					}
					set(
						$current,
						"time",
						lv_time_2_0,
						"su.nsk.iae.edtl.Edtl.TimeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTauExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeLiteralRule()); }
	iv_ruleTimeLiteral=ruleTimeLiteral
	{ $current=$iv_ruleTimeLiteral.current; }
	EOF;

// Rule TimeLiteral
ruleTimeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALParserRuleCall_0());
		}
		ruleTIME_PREF_LITERAL
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_interval_1_0=RULE_INTERVAL
				{
					newLeafNode(lv_interval_1_0, grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_1_0,
						"su.nsk.iae.edtl.Edtl.INTERVAL");
				}
			)
		)
	)
;

// Entry rule entryRuleTIME_PREF_LITERAL
entryRuleTIME_PREF_LITERAL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTIME_PREF_LITERALRule()); }
	iv_ruleTIME_PREF_LITERAL=ruleTIME_PREF_LITERAL
	{ $current=$iv_ruleTIME_PREF_LITERAL.current.getText(); }
	EOF;

// Rule TIME_PREF_LITERAL
ruleTIME_PREF_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='#T'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getTIME_PREF_LITERALAccess().getTKeyword());
	}
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_const_0_0=RULE_INTEGER
				{
					newLeafNode(lv_const_0_0, grammarAccess.getPrimaryExpressionAccess().getConstINTEGERTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"const",
						lv_const_0_0,
						"su.nsk.iae.edtl.Edtl.INTEGER");
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getVarCrossVarAbbrCrossReference_1_0());
				}
			)
		)
		    |
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getMacrosMacrosCrossReference_2_0_0());
					}
				)
			)
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArgsParamAssignmentElementsParserRuleCall_2_2_0());
					}
					lv_args_4_0=ruleParamAssignmentElements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"args",
							lv_args_4_0,
							"su.nsk.iae.edtl.Edtl.ParamAssignmentElements");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_3());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTauTauExpressionParserRuleCall_3_0());
				}
				lv_tau_6_0=ruleTauExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"tau",
						lv_tau_6_0,
						"su.nsk.iae.edtl.Edtl.TauExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_7='('
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_4_1_0());
					}
					lv_nestExpr_8_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"nestExpr",
							lv_nestExpr_8_0,
							"su.nsk.iae.edtl.Edtl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2());
			}
		)
	)
;

// Entry rule entryRuleParamAssignmentElements
entryRuleParamAssignmentElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamAssignmentElementsRule()); }
	iv_ruleParamAssignmentElements=ruleParamAssignmentElements
	{ $current=$iv_ruleParamAssignmentElements.current; }
	EOF;

// Rule ParamAssignmentElements
ruleParamAssignmentElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamAssignmentElementsRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getParamAssignmentElementsAccess().getElementsVariableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParamAssignmentElementsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamAssignmentElementsRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getParamAssignmentElementsAccess().getElementsVariableCrossReference_1_1_0());
					}
				)
			)
		)*
	)
;

// Rule EquOperator
ruleEquOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getEquOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEquOperatorAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<>'
			{
				$current = grammarAccess.getEquOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEquOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompOperator
ruleCompOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getCompOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getCompOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_DECL_SYMB : ':=';

RULE_OR_OPERATOR : ('||'|'OR');

RULE_INTERVAL : (RULE_INTEGER 'd')? (RULE_INTEGER 'h')? (RULE_INTEGER 'm')? (RULE_INTEGER 's')? (RULE_INTEGER 'ms')?;

RULE_INTEGER : RULE_DIGIT+;

fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_BIT : ('0'|'1');

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : (RULE_DIGIT|'A'..'F');

RULE_ID : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_ML_COMMENT : ('/*' ( options {greedy=false;} : . )*'*/'|'(*' ( options {greedy=false;} : . )*'*)');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;
