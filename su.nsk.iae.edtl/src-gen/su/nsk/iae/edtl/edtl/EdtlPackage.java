/**
 * generated by Xtext 2.25.0
 */
package su.nsk.iae.edtl.edtl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see su.nsk.iae.edtl.edtl.EdtlFactory
 * @model kind="package"
 * @generated
 */
public interface EdtlPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "edtl";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.nsk.su/iae/edtl/Edtl";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "edtl";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  EdtlPackage eINSTANCE = su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl.init();

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.ModelImpl <em>Model</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.ModelImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getModel()
   * @generated
   */
  int MODEL = 0;

  /**
   * The number of structural features of the '<em>Model</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MODEL_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.StatementImpl <em>Statement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.StatementImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getStatement()
   * @generated
   */
  int STATEMENT = 1;

  /**
   * The number of structural features of the '<em>Statement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int STATEMENT_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.DeclVarInputImpl <em>Decl Var Input</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.DeclVarInputImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getDeclVarInput()
   * @generated
   */
  int DECL_VAR_INPUT = 2;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DECL_VAR_INPUT__VALUE = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Decl Var Input</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DECL_VAR_INPUT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.DeclVarOutputImpl <em>Decl Var Output</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.DeclVarOutputImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getDeclVarOutput()
   * @generated
   */
  int DECL_VAR_OUTPUT = 3;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DECL_VAR_OUTPUT__VALUE = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Decl Var Output</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DECL_VAR_OUTPUT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.VarDeclarationImpl <em>Var Declaration</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.VarDeclarationImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getVarDeclaration()
   * @generated
   */
  int VAR_DECLARATION = 4;

  /**
   * The feature id for the '<em><b>Var</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_DECLARATION__VAR = 0;

  /**
   * The feature id for the '<em><b>Type</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_DECLARATION__TYPE = 1;

  /**
   * The number of structural features of the '<em>Var Declaration</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_DECLARATION_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.AbbrImpl <em>Abbr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.AbbrImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getAbbr()
   * @generated
   */
  int ABBR = 5;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABBR__NAME = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABBR__VALUE = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The number of structural features of the '<em>Abbr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABBR_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 2;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.MacrosImpl <em>Macros</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.MacrosImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getMacros()
   * @generated
   */
  int MACROS = 6;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACROS__NAME = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Args</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACROS__ARGS = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACROS__VALUE = STATEMENT_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Macros</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int MACROS_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.VarListImpl <em>Var List</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.VarListImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getVarList()
   * @generated
   */
  int VAR_LIST = 7;

  /**
   * The feature id for the '<em><b>Vars</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_LIST__VARS = 0;

  /**
   * The number of structural features of the '<em>Var List</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VAR_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.RequirementImpl <em>Requirement</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.RequirementImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getRequirement()
   * @generated
   */
  int REQUIREMENT = 8;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REQUIREMENT__NAME = STATEMENT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Attribute</b></em>' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REQUIREMENT__ATTRIBUTE = STATEMENT_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Value</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REQUIREMENT__VALUE = STATEMENT_FEATURE_COUNT + 2;

  /**
   * The number of structural features of the '<em>Requirement</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int REQUIREMENT_FEATURE_COUNT = STATEMENT_FEATURE_COUNT + 3;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.CrossVarAbbrImpl <em>Cross Var Abbr</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.CrossVarAbbrImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getCrossVarAbbr()
   * @generated
   */
  int CROSS_VAR_ABBR = 20;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CROSS_VAR_ABBR__NAME = 0;

  /**
   * The number of structural features of the '<em>Cross Var Abbr</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CROSS_VAR_ABBR_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.VariableImpl <em>Variable</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.VariableImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getVariable()
   * @generated
   */
  int VARIABLE = 9;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE__NAME = CROSS_VAR_ABBR__NAME;

  /**
   * The number of structural features of the '<em>Variable</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int VARIABLE_FEATURE_COUNT = CROSS_VAR_ABBR_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.ExpressionImpl <em>Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.ExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getExpression()
   * @generated
   */
  int EXPRESSION = 10;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__LEFT = 0;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__OR_OP = 1;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__RIGHT = 2;

  /**
   * The number of structural features of the '<em>Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.XorExpressionImpl <em>Xor Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.XorExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getXorExpression()
   * @generated
   */
  int XOR_EXPRESSION = 11;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int XOR_EXPRESSION__LEFT = EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int XOR_EXPRESSION__OR_OP = EXPRESSION__OR_OP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int XOR_EXPRESSION__RIGHT = EXPRESSION__RIGHT;

  /**
   * The number of structural features of the '<em>Xor Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int XOR_EXPRESSION_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.AndExpressionImpl <em>And Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.AndExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getAndExpression()
   * @generated
   */
  int AND_EXPRESSION = 12;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION__LEFT = XOR_EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION__OR_OP = XOR_EXPRESSION__OR_OP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION__RIGHT = XOR_EXPRESSION__RIGHT;

  /**
   * The feature id for the '<em><b>And Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION__AND_OP = XOR_EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>And Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AND_EXPRESSION_FEATURE_COUNT = XOR_EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.CompExpressionImpl <em>Comp Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.CompExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getCompExpression()
   * @generated
   */
  int COMP_EXPRESSION = 13;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMP_EXPRESSION__LEFT = AND_EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMP_EXPRESSION__OR_OP = AND_EXPRESSION__OR_OP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMP_EXPRESSION__RIGHT = AND_EXPRESSION__RIGHT;

  /**
   * The feature id for the '<em><b>And Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMP_EXPRESSION__AND_OP = AND_EXPRESSION__AND_OP;

  /**
   * The feature id for the '<em><b>Comp Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMP_EXPRESSION__COMP_OP = AND_EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Comp Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMP_EXPRESSION_FEATURE_COUNT = AND_EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.EquExpressionImpl <em>Equ Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.EquExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getEquExpression()
   * @generated
   */
  int EQU_EXPRESSION = 14;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION__LEFT = COMP_EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION__OR_OP = COMP_EXPRESSION__OR_OP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION__RIGHT = COMP_EXPRESSION__RIGHT;

  /**
   * The feature id for the '<em><b>And Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION__AND_OP = COMP_EXPRESSION__AND_OP;

  /**
   * The feature id for the '<em><b>Comp Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION__COMP_OP = COMP_EXPRESSION__COMP_OP;

  /**
   * The feature id for the '<em><b>Equ Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION__EQU_OP = COMP_EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Equ Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EQU_EXPRESSION_FEATURE_COUNT = COMP_EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.UnExpressionImpl <em>Un Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.UnExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getUnExpression()
   * @generated
   */
  int UN_EXPRESSION = 15;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__LEFT = EQU_EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__OR_OP = EQU_EXPRESSION__OR_OP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__RIGHT = EQU_EXPRESSION__RIGHT;

  /**
   * The feature id for the '<em><b>And Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__AND_OP = EQU_EXPRESSION__AND_OP;

  /**
   * The feature id for the '<em><b>Comp Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__COMP_OP = EQU_EXPRESSION__COMP_OP;

  /**
   * The feature id for the '<em><b>Equ Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__EQU_OP = EQU_EXPRESSION__EQU_OP;

  /**
   * The feature id for the '<em><b>Un Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION__UN_OP = EQU_EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Un Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UN_EXPRESSION_FEATURE_COUNT = EQU_EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.TauExpressionImpl <em>Tau Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.TauExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getTauExpression()
   * @generated
   */
  int TAU_EXPRESSION = 16;

  /**
   * The feature id for the '<em><b>Time</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TAU_EXPRESSION__TIME = 0;

  /**
   * The number of structural features of the '<em>Tau Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TAU_EXPRESSION_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.TimeLiteralImpl <em>Time Literal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.TimeLiteralImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getTimeLiteral()
   * @generated
   */
  int TIME_LITERAL = 17;

  /**
   * The feature id for the '<em><b>Interval</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TIME_LITERAL__INTERVAL = 0;

  /**
   * The number of structural features of the '<em>Time Literal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int TIME_LITERAL_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl <em>Primary Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getPrimaryExpression()
   * @generated
   */
  int PRIMARY_EXPRESSION = 18;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__LEFT = UN_EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Or Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__OR_OP = UN_EXPRESSION__OR_OP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__RIGHT = UN_EXPRESSION__RIGHT;

  /**
   * The feature id for the '<em><b>And Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__AND_OP = UN_EXPRESSION__AND_OP;

  /**
   * The feature id for the '<em><b>Comp Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__COMP_OP = UN_EXPRESSION__COMP_OP;

  /**
   * The feature id for the '<em><b>Equ Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__EQU_OP = UN_EXPRESSION__EQU_OP;

  /**
   * The feature id for the '<em><b>Un Op</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__UN_OP = UN_EXPRESSION__UN_OP;

  /**
   * The feature id for the '<em><b>Const</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__CONST = UN_EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Var</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__VAR = UN_EXPRESSION_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Macros</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__MACROS = UN_EXPRESSION_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Args</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__ARGS = UN_EXPRESSION_FEATURE_COUNT + 3;

  /**
   * The feature id for the '<em><b>Tau</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__TAU = UN_EXPRESSION_FEATURE_COUNT + 4;

  /**
   * The feature id for the '<em><b>Nest Expr</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION__NEST_EXPR = UN_EXPRESSION_FEATURE_COUNT + 5;

  /**
   * The number of structural features of the '<em>Primary Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PRIMARY_EXPRESSION_FEATURE_COUNT = UN_EXPRESSION_FEATURE_COUNT + 6;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.ParamAssignmentElementsImpl <em>Param Assignment Elements</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.ParamAssignmentElementsImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getParamAssignmentElements()
   * @generated
   */
  int PARAM_ASSIGNMENT_ELEMENTS = 19;

  /**
   * The feature id for the '<em><b>Elements</b></em>' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAM_ASSIGNMENT_ELEMENTS__ELEMENTS = 0;

  /**
   * The number of structural features of the '<em>Param Assignment Elements</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PARAM_ASSIGNMENT_ELEMENTS_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.impl.wImpl <em>w</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.impl.wImpl
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getw()
   * @generated
   */
  int W = 21;

  /**
   * The feature id for the '<em><b>Elements</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int W__ELEMENTS = MODEL_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>w</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int W_FEATURE_COUNT = MODEL_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.EquOperator <em>Equ Operator</em>}' enum.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.EquOperator
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getEquOperator()
   * @generated
   */
  int EQU_OPERATOR = 22;

  /**
   * The meta object id for the '{@link su.nsk.iae.edtl.edtl.CompOperator <em>Comp Operator</em>}' enum.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see su.nsk.iae.edtl.edtl.CompOperator
   * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getCompOperator()
   * @generated
   */
  int COMP_OPERATOR = 23;


  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Model</em>'.
   * @see su.nsk.iae.edtl.edtl.Model
   * @generated
   */
  EClass getModel();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Statement</em>'.
   * @see su.nsk.iae.edtl.edtl.Statement
   * @generated
   */
  EClass getStatement();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.DeclVarInput <em>Decl Var Input</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Decl Var Input</em>'.
   * @see su.nsk.iae.edtl.edtl.DeclVarInput
   * @generated
   */
  EClass getDeclVarInput();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.DeclVarInput#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Value</em>'.
   * @see su.nsk.iae.edtl.edtl.DeclVarInput#getValue()
   * @see #getDeclVarInput()
   * @generated
   */
  EReference getDeclVarInput_Value();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.DeclVarOutput <em>Decl Var Output</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Decl Var Output</em>'.
   * @see su.nsk.iae.edtl.edtl.DeclVarOutput
   * @generated
   */
  EClass getDeclVarOutput();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.DeclVarOutput#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Value</em>'.
   * @see su.nsk.iae.edtl.edtl.DeclVarOutput#getValue()
   * @see #getDeclVarOutput()
   * @generated
   */
  EReference getDeclVarOutput_Value();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.VarDeclaration <em>Var Declaration</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Var Declaration</em>'.
   * @see su.nsk.iae.edtl.edtl.VarDeclaration
   * @generated
   */
  EClass getVarDeclaration();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.VarDeclaration#getVar <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Var</em>'.
   * @see su.nsk.iae.edtl.edtl.VarDeclaration#getVar()
   * @see #getVarDeclaration()
   * @generated
   */
  EReference getVarDeclaration_Var();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.VarDeclaration#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Type</em>'.
   * @see su.nsk.iae.edtl.edtl.VarDeclaration#getType()
   * @see #getVarDeclaration()
   * @generated
   */
  EAttribute getVarDeclaration_Type();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Abbr <em>Abbr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Abbr</em>'.
   * @see su.nsk.iae.edtl.edtl.Abbr
   * @generated
   */
  EClass getAbbr();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.Abbr#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Value</em>'.
   * @see su.nsk.iae.edtl.edtl.Abbr#getValue()
   * @see #getAbbr()
   * @generated
   */
  EReference getAbbr_Value();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Macros <em>Macros</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Macros</em>'.
   * @see su.nsk.iae.edtl.edtl.Macros
   * @generated
   */
  EClass getMacros();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.Macros#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see su.nsk.iae.edtl.edtl.Macros#getName()
   * @see #getMacros()
   * @generated
   */
  EAttribute getMacros_Name();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.Macros#getArgs <em>Args</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Args</em>'.
   * @see su.nsk.iae.edtl.edtl.Macros#getArgs()
   * @see #getMacros()
   * @generated
   */
  EReference getMacros_Args();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.Macros#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Value</em>'.
   * @see su.nsk.iae.edtl.edtl.Macros#getValue()
   * @see #getMacros()
   * @generated
   */
  EReference getMacros_Value();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.VarList <em>Var List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Var List</em>'.
   * @see su.nsk.iae.edtl.edtl.VarList
   * @generated
   */
  EClass getVarList();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.VarList#getVars <em>Vars</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Vars</em>'.
   * @see su.nsk.iae.edtl.edtl.VarList#getVars()
   * @see #getVarList()
   * @generated
   */
  EReference getVarList_Vars();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Requirement</em>'.
   * @see su.nsk.iae.edtl.edtl.Requirement
   * @generated
   */
  EClass getRequirement();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.Requirement#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see su.nsk.iae.edtl.edtl.Requirement#getName()
   * @see #getRequirement()
   * @generated
   */
  EAttribute getRequirement_Name();

  /**
   * Returns the meta object for the attribute list '{@link su.nsk.iae.edtl.edtl.Requirement#getAttribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute list '<em>Attribute</em>'.
   * @see su.nsk.iae.edtl.edtl.Requirement#getAttribute()
   * @see #getRequirement()
   * @generated
   */
  EAttribute getRequirement_Attribute();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.Requirement#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Value</em>'.
   * @see su.nsk.iae.edtl.edtl.Requirement#getValue()
   * @see #getRequirement()
   * @generated
   */
  EReference getRequirement_Value();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Variable</em>'.
   * @see su.nsk.iae.edtl.edtl.Variable
   * @generated
   */
  EClass getVariable();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.Expression
   * @generated
   */
  EClass getExpression();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.Expression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see su.nsk.iae.edtl.edtl.Expression#getLeft()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_Left();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.Expression#getOrOp <em>Or Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Or Op</em>'.
   * @see su.nsk.iae.edtl.edtl.Expression#getOrOp()
   * @see #getExpression()
   * @generated
   */
  EAttribute getExpression_OrOp();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.Expression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see su.nsk.iae.edtl.edtl.Expression#getRight()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_Right();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.XorExpression <em>Xor Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Xor Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.XorExpression
   * @generated
   */
  EClass getXorExpression();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.AndExpression <em>And Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>And Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.AndExpression
   * @generated
   */
  EClass getAndExpression();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.AndExpression#getAndOp <em>And Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>And Op</em>'.
   * @see su.nsk.iae.edtl.edtl.AndExpression#getAndOp()
   * @see #getAndExpression()
   * @generated
   */
  EAttribute getAndExpression_AndOp();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.CompExpression <em>Comp Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Comp Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.CompExpression
   * @generated
   */
  EClass getCompExpression();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.CompExpression#getCompOp <em>Comp Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Comp Op</em>'.
   * @see su.nsk.iae.edtl.edtl.CompExpression#getCompOp()
   * @see #getCompExpression()
   * @generated
   */
  EAttribute getCompExpression_CompOp();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.EquExpression <em>Equ Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Equ Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.EquExpression
   * @generated
   */
  EClass getEquExpression();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.EquExpression#getEquOp <em>Equ Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Equ Op</em>'.
   * @see su.nsk.iae.edtl.edtl.EquExpression#getEquOp()
   * @see #getEquExpression()
   * @generated
   */
  EAttribute getEquExpression_EquOp();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.UnExpression <em>Un Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Un Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.UnExpression
   * @generated
   */
  EClass getUnExpression();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.UnExpression#getUnOp <em>Un Op</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Un Op</em>'.
   * @see su.nsk.iae.edtl.edtl.UnExpression#getUnOp()
   * @see #getUnExpression()
   * @generated
   */
  EAttribute getUnExpression_UnOp();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.TauExpression <em>Tau Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Tau Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.TauExpression
   * @generated
   */
  EClass getTauExpression();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.TauExpression#getTime <em>Time</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Time</em>'.
   * @see su.nsk.iae.edtl.edtl.TauExpression#getTime()
   * @see #getTauExpression()
   * @generated
   */
  EReference getTauExpression_Time();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.TimeLiteral <em>Time Literal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Time Literal</em>'.
   * @see su.nsk.iae.edtl.edtl.TimeLiteral
   * @generated
   */
  EClass getTimeLiteral();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.TimeLiteral#getInterval <em>Interval</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Interval</em>'.
   * @see su.nsk.iae.edtl.edtl.TimeLiteral#getInterval()
   * @see #getTimeLiteral()
   * @generated
   */
  EAttribute getTimeLiteral_Interval();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.PrimaryExpression <em>Primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Primary Expression</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression
   * @generated
   */
  EClass getPrimaryExpression();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.PrimaryExpression#getConst <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Const</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression#getConst()
   * @see #getPrimaryExpression()
   * @generated
   */
  EAttribute getPrimaryExpression_Const();

  /**
   * Returns the meta object for the reference '{@link su.nsk.iae.edtl.edtl.PrimaryExpression#getVar <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Var</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression#getVar()
   * @see #getPrimaryExpression()
   * @generated
   */
  EReference getPrimaryExpression_Var();

  /**
   * Returns the meta object for the reference '{@link su.nsk.iae.edtl.edtl.PrimaryExpression#getMacros <em>Macros</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Macros</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression#getMacros()
   * @see #getPrimaryExpression()
   * @generated
   */
  EReference getPrimaryExpression_Macros();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.PrimaryExpression#getArgs <em>Args</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Args</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression#getArgs()
   * @see #getPrimaryExpression()
   * @generated
   */
  EReference getPrimaryExpression_Args();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.PrimaryExpression#getTau <em>Tau</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Tau</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression#getTau()
   * @see #getPrimaryExpression()
   * @generated
   */
  EReference getPrimaryExpression_Tau();

  /**
   * Returns the meta object for the containment reference '{@link su.nsk.iae.edtl.edtl.PrimaryExpression#getNestExpr <em>Nest Expr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Nest Expr</em>'.
   * @see su.nsk.iae.edtl.edtl.PrimaryExpression#getNestExpr()
   * @see #getPrimaryExpression()
   * @generated
   */
  EReference getPrimaryExpression_NestExpr();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.ParamAssignmentElements <em>Param Assignment Elements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Param Assignment Elements</em>'.
   * @see su.nsk.iae.edtl.edtl.ParamAssignmentElements
   * @generated
   */
  EClass getParamAssignmentElements();

  /**
   * Returns the meta object for the reference list '{@link su.nsk.iae.edtl.edtl.ParamAssignmentElements#getElements <em>Elements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference list '<em>Elements</em>'.
   * @see su.nsk.iae.edtl.edtl.ParamAssignmentElements#getElements()
   * @see #getParamAssignmentElements()
   * @generated
   */
  EReference getParamAssignmentElements_Elements();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.CrossVarAbbr <em>Cross Var Abbr</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Cross Var Abbr</em>'.
   * @see su.nsk.iae.edtl.edtl.CrossVarAbbr
   * @generated
   */
  EClass getCrossVarAbbr();

  /**
   * Returns the meta object for the attribute '{@link su.nsk.iae.edtl.edtl.CrossVarAbbr#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see su.nsk.iae.edtl.edtl.CrossVarAbbr#getName()
   * @see #getCrossVarAbbr()
   * @generated
   */
  EAttribute getCrossVarAbbr_Name();

  /**
   * Returns the meta object for class '{@link su.nsk.iae.edtl.edtl.w <em>w</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>w</em>'.
   * @see su.nsk.iae.edtl.edtl.w
   * @generated
   */
  EClass getw();

  /**
   * Returns the meta object for the containment reference list '{@link su.nsk.iae.edtl.edtl.w#getElements <em>Elements</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Elements</em>'.
   * @see su.nsk.iae.edtl.edtl.w#getElements()
   * @see #getw()
   * @generated
   */
  EReference getw_Elements();

  /**
   * Returns the meta object for enum '{@link su.nsk.iae.edtl.edtl.EquOperator <em>Equ Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for enum '<em>Equ Operator</em>'.
   * @see su.nsk.iae.edtl.edtl.EquOperator
   * @generated
   */
  EEnum getEquOperator();

  /**
   * Returns the meta object for enum '{@link su.nsk.iae.edtl.edtl.CompOperator <em>Comp Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for enum '<em>Comp Operator</em>'.
   * @see su.nsk.iae.edtl.edtl.CompOperator
   * @generated
   */
  EEnum getCompOperator();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  EdtlFactory getEdtlFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.ModelImpl <em>Model</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.ModelImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getModel()
     * @generated
     */
    EClass MODEL = eINSTANCE.getModel();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.StatementImpl <em>Statement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.StatementImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getStatement()
     * @generated
     */
    EClass STATEMENT = eINSTANCE.getStatement();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.DeclVarInputImpl <em>Decl Var Input</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.DeclVarInputImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getDeclVarInput()
     * @generated
     */
    EClass DECL_VAR_INPUT = eINSTANCE.getDeclVarInput();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DECL_VAR_INPUT__VALUE = eINSTANCE.getDeclVarInput_Value();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.DeclVarOutputImpl <em>Decl Var Output</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.DeclVarOutputImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getDeclVarOutput()
     * @generated
     */
    EClass DECL_VAR_OUTPUT = eINSTANCE.getDeclVarOutput();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DECL_VAR_OUTPUT__VALUE = eINSTANCE.getDeclVarOutput_Value();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.VarDeclarationImpl <em>Var Declaration</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.VarDeclarationImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getVarDeclaration()
     * @generated
     */
    EClass VAR_DECLARATION = eINSTANCE.getVarDeclaration();

    /**
     * The meta object literal for the '<em><b>Var</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR_DECLARATION__VAR = eINSTANCE.getVarDeclaration_Var();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute VAR_DECLARATION__TYPE = eINSTANCE.getVarDeclaration_Type();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.AbbrImpl <em>Abbr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.AbbrImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getAbbr()
     * @generated
     */
    EClass ABBR = eINSTANCE.getAbbr();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ABBR__VALUE = eINSTANCE.getAbbr_Value();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.MacrosImpl <em>Macros</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.MacrosImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getMacros()
     * @generated
     */
    EClass MACROS = eINSTANCE.getMacros();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute MACROS__NAME = eINSTANCE.getMacros_Name();

    /**
     * The meta object literal for the '<em><b>Args</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MACROS__ARGS = eINSTANCE.getMacros_Args();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference MACROS__VALUE = eINSTANCE.getMacros_Value();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.VarListImpl <em>Var List</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.VarListImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getVarList()
     * @generated
     */
    EClass VAR_LIST = eINSTANCE.getVarList();

    /**
     * The meta object literal for the '<em><b>Vars</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference VAR_LIST__VARS = eINSTANCE.getVarList_Vars();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.RequirementImpl <em>Requirement</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.RequirementImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getRequirement()
     * @generated
     */
    EClass REQUIREMENT = eINSTANCE.getRequirement();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute REQUIREMENT__NAME = eINSTANCE.getRequirement_Name();

    /**
     * The meta object literal for the '<em><b>Attribute</b></em>' attribute list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute REQUIREMENT__ATTRIBUTE = eINSTANCE.getRequirement_Attribute();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference REQUIREMENT__VALUE = eINSTANCE.getRequirement_Value();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.VariableImpl <em>Variable</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.VariableImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getVariable()
     * @generated
     */
    EClass VARIABLE = eINSTANCE.getVariable();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.ExpressionImpl <em>Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.ExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getExpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__LEFT = eINSTANCE.getExpression_Left();

    /**
     * The meta object literal for the '<em><b>Or Op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPRESSION__OR_OP = eINSTANCE.getExpression_OrOp();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__RIGHT = eINSTANCE.getExpression_Right();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.XorExpressionImpl <em>Xor Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.XorExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getXorExpression()
     * @generated
     */
    EClass XOR_EXPRESSION = eINSTANCE.getXorExpression();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.AndExpressionImpl <em>And Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.AndExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getAndExpression()
     * @generated
     */
    EClass AND_EXPRESSION = eINSTANCE.getAndExpression();

    /**
     * The meta object literal for the '<em><b>And Op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute AND_EXPRESSION__AND_OP = eINSTANCE.getAndExpression_AndOp();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.CompExpressionImpl <em>Comp Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.CompExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getCompExpression()
     * @generated
     */
    EClass COMP_EXPRESSION = eINSTANCE.getCompExpression();

    /**
     * The meta object literal for the '<em><b>Comp Op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMP_EXPRESSION__COMP_OP = eINSTANCE.getCompExpression_CompOp();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.EquExpressionImpl <em>Equ Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.EquExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getEquExpression()
     * @generated
     */
    EClass EQU_EXPRESSION = eINSTANCE.getEquExpression();

    /**
     * The meta object literal for the '<em><b>Equ Op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EQU_EXPRESSION__EQU_OP = eINSTANCE.getEquExpression_EquOp();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.UnExpressionImpl <em>Un Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.UnExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getUnExpression()
     * @generated
     */
    EClass UN_EXPRESSION = eINSTANCE.getUnExpression();

    /**
     * The meta object literal for the '<em><b>Un Op</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UN_EXPRESSION__UN_OP = eINSTANCE.getUnExpression_UnOp();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.TauExpressionImpl <em>Tau Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.TauExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getTauExpression()
     * @generated
     */
    EClass TAU_EXPRESSION = eINSTANCE.getTauExpression();

    /**
     * The meta object literal for the '<em><b>Time</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference TAU_EXPRESSION__TIME = eINSTANCE.getTauExpression_Time();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.TimeLiteralImpl <em>Time Literal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.TimeLiteralImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getTimeLiteral()
     * @generated
     */
    EClass TIME_LITERAL = eINSTANCE.getTimeLiteral();

    /**
     * The meta object literal for the '<em><b>Interval</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute TIME_LITERAL__INTERVAL = eINSTANCE.getTimeLiteral_Interval();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl <em>Primary Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.PrimaryExpressionImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getPrimaryExpression()
     * @generated
     */
    EClass PRIMARY_EXPRESSION = eINSTANCE.getPrimaryExpression();

    /**
     * The meta object literal for the '<em><b>Const</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute PRIMARY_EXPRESSION__CONST = eINSTANCE.getPrimaryExpression_Const();

    /**
     * The meta object literal for the '<em><b>Var</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PRIMARY_EXPRESSION__VAR = eINSTANCE.getPrimaryExpression_Var();

    /**
     * The meta object literal for the '<em><b>Macros</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PRIMARY_EXPRESSION__MACROS = eINSTANCE.getPrimaryExpression_Macros();

    /**
     * The meta object literal for the '<em><b>Args</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PRIMARY_EXPRESSION__ARGS = eINSTANCE.getPrimaryExpression_Args();

    /**
     * The meta object literal for the '<em><b>Tau</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PRIMARY_EXPRESSION__TAU = eINSTANCE.getPrimaryExpression_Tau();

    /**
     * The meta object literal for the '<em><b>Nest Expr</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PRIMARY_EXPRESSION__NEST_EXPR = eINSTANCE.getPrimaryExpression_NestExpr();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.ParamAssignmentElementsImpl <em>Param Assignment Elements</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.ParamAssignmentElementsImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getParamAssignmentElements()
     * @generated
     */
    EClass PARAM_ASSIGNMENT_ELEMENTS = eINSTANCE.getParamAssignmentElements();

    /**
     * The meta object literal for the '<em><b>Elements</b></em>' reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PARAM_ASSIGNMENT_ELEMENTS__ELEMENTS = eINSTANCE.getParamAssignmentElements_Elements();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.CrossVarAbbrImpl <em>Cross Var Abbr</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.CrossVarAbbrImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getCrossVarAbbr()
     * @generated
     */
    EClass CROSS_VAR_ABBR = eINSTANCE.getCrossVarAbbr();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CROSS_VAR_ABBR__NAME = eINSTANCE.getCrossVarAbbr_Name();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.impl.wImpl <em>w</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.impl.wImpl
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getw()
     * @generated
     */
    EClass W = eINSTANCE.getw();

    /**
     * The meta object literal for the '<em><b>Elements</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference W__ELEMENTS = eINSTANCE.getw_Elements();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.EquOperator <em>Equ Operator</em>}' enum.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.EquOperator
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getEquOperator()
     * @generated
     */
    EEnum EQU_OPERATOR = eINSTANCE.getEquOperator();

    /**
     * The meta object literal for the '{@link su.nsk.iae.edtl.edtl.CompOperator <em>Comp Operator</em>}' enum.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see su.nsk.iae.edtl.edtl.CompOperator
     * @see su.nsk.iae.edtl.edtl.impl.EdtlPackageImpl#getCompOperator()
     * @generated
     */
    EEnum COMP_OPERATOR = eINSTANCE.getCompOperator();

  }

} //EdtlPackage
